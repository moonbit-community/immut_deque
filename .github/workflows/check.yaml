name: check

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-13, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4

      - name: install
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          curl -fsSL https://cli.moonbitlang.com/install/unix.sh | bash
          echo "$HOME/.moon/bin" >> $GITHUB_PATH

      - name: install on windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser; irm https://cli.moonbitlang.com/install/powershell.ps1 | iex
          "C:\Users\runneradmin\.moon\bin" | Out-File -FilePath $env:GITHUB_PATH -Append

      - name: moon version
        run: |
          moon version --all
          moonrun --version

      - name: moon check
        run: moon check --deny-warn

      - name: moon info
        run: |
          moon info --target wasm,wasm-gc,js,native
          git diff --exit-code

      - name: Set ulimit and run moon test
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          ulimit -s 8176
          moon test --target all
          moon test --release --target all
          moon test --target native
          moon test --target native --release

      - name: moon test with dedup_wasm
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          moon clean
          ulimit -s 8176
          moon test --target wasm
          moon test --target wasm-gc
          moon test --release --target wasm
          moon test --release --target wasm-gc
        env: 
          MOONC_INTERNAL_PARAMS: dedup_wasm = 1 |


      - name: Setup MSVC
        if: ${{ matrix.os == 'windows-latest' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Run moon test on Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          moon test --target all
          moon test --release --target all
          moon test --target native

      - name: moon test --doc
        run: |
          moon test --doc

  typo-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      FORCE_COLOR: 1
      TYPOS_VERSION: v1.19.0
    steps:
      - name: download typos
        run: curl -LsSf https://github.com/crate-ci/typos/releases/download/$TYPOS_VERSION/typos-$TYPOS_VERSION-x86_64-unknown-linux-musl.tar.gz | tar zxf - -C ${CARGO_HOME:-~/.cargo}/bin

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: check typos
        run: typos

  nightly-check:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, macos-13, windows-latest]
      fail-fast: false

    continue-on-error: true
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: install
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          curl -fsSL https://cli.moonbitlang.com/install/unix.sh | bash -s 'nightly'
          echo "$HOME/.moon/bin" >> $GITHUB_PATH

      - name: install on windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          irm https://cli.moonbitlang.com/install/powershell.ps1 | iex
          "C:\Users\runneradmin\.moon\bin" | Out-File -FilePath $env:GITHUB_PATH -Append
        env:
          MOONBIT_INSTALL_VERSION: nightly

      - name: moon version
        run: |
          moon version --all
          moonrun --version

      - name: moon check
        run: moon check --deny-warn

      - name: Set ulimit and run moon test
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          ulimit -s 8176
          moon test --target all
          moon test --release --target all
          moon test --target native
          moon test --target native --release

      - name: Setup MSVC
        if: ${{ matrix.os == 'windows-latest' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Run moon test on Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          moon test --target all
          moon test --release --target all
          moon test --target native

      - name: moon test --doc
        run: |
          moon test --doc

  bleeding-check:
    continue-on-error: true
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: install
        run: |
          curl -fsSL https://cli.moonbitlang.com/install/unix.sh | bash -s 'bleeding'
          echo "$HOME/.moon/bin" >> $GITHUB_PATH

      - name: moon version
        run: |
          moon version --all
          moonrun --version

      - name: moon check
        run: moon check --deny-warn

      - name: Set ulimit and run moon test
        run: |
          ulimit -s 8176
          moon test --target all
          moon test --release --target all
          moon test --target native
          moon test --target native --release

      - name: moon test --doc
        run: |
          moon test --doc

  moon-json-format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: check `moon.*.json` format
        shell: bash
        run: |
          _passed=0;
          for f in $(find . -type f -name "moon.*.json"); do
            if ! jq '.' $f > /dev/null; then
              echo $f;
              _passed=1;
            fi
          done
          (exit $_passed)
