// Generated using `moon info`, DON'T EDIT IT
package "illusory0x0/immut_deque"

import(
  "moonbitlang/core/list"
)

// Values

// Errors

// Types and methods
type T[A]
fn[A] T::append(Self[A], Self[A]) -> Self[A]
fnalias T::append
fn[A, B] T::bind(Self[A], (A) -> Self[B]) -> Self[B]
fnalias T::bind
fn[A] T::cons(Self[A], A) -> Self[A]
fnalias T::cons
fn[A] T::drop(Self[A], Int) -> Self[A]
fnalias T::drop
fn[A] T::dropWhile(Self[A], (A) -> Bool) -> Self[A]
fnalias T::dropWhile
fn[A] T::empty() -> Self[A]
fnalias T::empty
fn[A] T::filter(Self[A], (A) -> Bool) -> Self[A]
fnalias T::filter
fn[A, B] T::filter_map(Self[A], (A) -> B?) -> Self[B]
fnalias T::filter_map
fn[A, B] T::foldl(Self[A], B, (B, A) -> B) -> B
fnalias T::foldl
fn[A, B] T::foldr(Self[A], B, (B, A) -> B) -> B
fnalias T::foldr
fn[A] T::from_iter(Iter[A]) -> Self[A]
fnalias T::from_iter
fn[A] T::from_list(@list.List[A]) -> Self[A]
fnalias T::from_list
fn[A] T::from_rev_list(@list.List[A]) -> Self[A]
fnalias T::from_rev_list
fn[A] T::head(Self[A]) -> A?
fnalias T::head
fn[A] T::init_(Self[A]) -> Self[A]
fnalias T::init_
fn[A] T::iter(Self[A]) -> Iter[A]
fnalias T::iter
fn[A] T::join(Self[Self[A]]) -> Self[A]
fnalias T::join
fn[A] T::last(Self[A]) -> A?
fnalias T::last
fn[A, B] T::map(Self[A], (A) -> B) -> Self[B]
fnalias T::map
fn[A] T::of(FixedArray[A]) -> Self[A]
fnalias T::of
fn[A] T::rev_iter(Self[A]) -> Iter[A]
fnalias T::rev_iter
fn[A] T::reverse(Self[A]) -> Self[A]
fnalias T::reverse
fn[A] T::singleton(A) -> Self[A]
fnalias T::singleton
fn[A] T::snoc(Self[A], A) -> Self[A]
fnalias T::snoc
fn[A] T::tail(Self[A]) -> Self[A]
fnalias T::tail
fn[A] T::take(Self[A], Int) -> Self[A]
fnalias T::take
fn[A] T::takeWhile(Self[A], (A) -> Bool) -> Self[A]
fnalias T::takeWhile
fn[A] T::to_array(Self[A]) -> Array[A]
fnalias T::to_array
fn[A] T::uncons(Self[A]) -> (A, Self[A])?
fnalias T::uncons
fn[A] T::unsnoc(Self[A]) -> (A, Self[A])?
fnalias T::unsnoc
impl[A : Show] Show for T[A]

// Type aliases

// Traits

