package "illusory0x0/immut_deque"

import(
  "moonbitlang/core/list"
)

// Values
fn[A] append(T[A], T[A]) -> T[A]

fn[A, B] bind(T[A], (A) -> T[B]) -> T[B]

fn[A] cons(T[A], A) -> T[A]

fn[A] drop(T[A], Int) -> T[A]

fn[A] dropWhile(T[A], (A) -> Bool) -> T[A]

fn[A] empty() -> T[A]

fn[A] filter(T[A], (A) -> Bool) -> T[A]

fn[A, B] filter_map(T[A], (A) -> B?) -> T[B]

fn[A, B] foldl(T[A], B, (B, A) -> B) -> B

fn[A, B] foldr(T[A], B, (B, A) -> B) -> B

fn[A] from_iter(Iter[A]) -> T[A]

fn[A] from_list(@list.T[A]) -> T[A]

fn[A] from_rev_list(@list.T[A]) -> T[A]

fn[A] head(T[A]) -> A?

fn[A] init_(T[A]) -> T[A]

fn[A] iter(T[A]) -> Iter[A]

fn[A] join(T[T[A]]) -> T[A]

fn[A] last(T[A]) -> A?

fn[A, B] map(T[A], (A) -> B) -> T[B]

fn[A] of(FixedArray[A]) -> T[A]

fn[A] rev_iter(T[A]) -> Iter[A]

fn[A] reverse(T[A]) -> T[A]

fn[A] singleton(A) -> T[A]

fn[A] snoc(T[A], A) -> T[A]

fn[A] tail(T[A]) -> T[A]

fn[A] take(T[A], Int) -> T[A]

fn[A] takeWhile(T[A], (A) -> Bool) -> T[A]

fn[A] to_array(T[A]) -> Array[A]

fn[A] uncons(T[A]) -> (A, T[A])?

fn[A] unsnoc(T[A]) -> (A, T[A])?

// Types and methods
type T[A]
fn[A] T::append(Self[A], Self[A]) -> Self[A]
fn[A, B] T::bind(Self[A], (A) -> Self[B]) -> Self[B]
fn[A] T::cons(Self[A], A) -> Self[A]
fn[A] T::drop(Self[A], Int) -> Self[A]
fn[A] T::dropWhile(Self[A], (A) -> Bool) -> Self[A]
fn[A] T::empty() -> Self[A]
fn[A] T::filter(Self[A], (A) -> Bool) -> Self[A]
fn[A, B] T::filter_map(Self[A], (A) -> B?) -> Self[B]
fn[A, B] T::foldl(Self[A], B, (B, A) -> B) -> B
fn[A, B] T::foldr(Self[A], B, (B, A) -> B) -> B
fn[A] T::from_iter(Iter[A]) -> Self[A]
fn[A] T::from_list(@list.T[A]) -> Self[A]
fn[A] T::from_rev_list(@list.T[A]) -> Self[A]
fn[A] T::head(Self[A]) -> A?
fn[A] T::init_(Self[A]) -> Self[A]
fn[A] T::iter(Self[A]) -> Iter[A]
fn[A] T::join(Self[Self[A]]) -> Self[A]
fn[A] T::last(Self[A]) -> A?
fn[A, B] T::map(Self[A], (A) -> B) -> Self[B]
fn[A] T::of(FixedArray[A]) -> Self[A]
fn[A] T::rev_iter(Self[A]) -> Iter[A]
fn[A] T::reverse(Self[A]) -> Self[A]
fn[A] T::singleton(A) -> Self[A]
fn[A] T::snoc(Self[A], A) -> Self[A]
fn[A] T::tail(Self[A]) -> Self[A]
fn[A] T::take(Self[A], Int) -> Self[A]
fn[A] T::takeWhile(Self[A], (A) -> Bool) -> Self[A]
fn[A] T::to_array(Self[A]) -> Array[A]
fn[A] T::uncons(Self[A]) -> (A, Self[A])?
fn[A] T::unsnoc(Self[A]) -> (A, Self[A])?
impl[A : Show] Show for T[A]

// Type aliases

// Traits

